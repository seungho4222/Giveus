pipeline {
  agent any
    environment {
      repository = "gudrb4869/giveus_backend_payment"  //docker hub id와 repository 이름
      DOCKERHUB_CREDENTIALS = credentials('dockerhub') // jenkins에 등록해 놓은 docker hub credentials 이름
      dockerImage = ''
      REPO = "s10-blockchain-contract-sub2/S10P22C206"
      MYSQL_USERNAME = "${env.MYSQL_USERNAME}"
      MYSQL_PASSWORD = "${env.MYSQL_PASSWORD}"
      REDIS_PASSWORD = "${env.REDIS_PASSWORD}"
      KAKAOPAY_CID = "${env.KAKAOPAY_CID}"
      KAKAOPAY_SECRET_KEY = "${env.KAKAOPAY_SECRET_KEY}"
      TOSSPAYMENTS_SECRET_KEY = "${env.TOSSPAYMENTS_SECRET_KEY}"
    }

  stages {

    stage('SonarQube analysis') {
        steps {
            withSonarQubeEnv('SonarQube-server') {
                dir('./backend-payment') {
                    script {
                        sh "chmod +x ./gradlew"
                        sh './gradlew sonarqube'
                    }
                }
            }
        }
    }

    stage('Build') {
      steps {
        dir('./backend-payment') {
          script {
            sh "chmod +x ./gradlew"
            sh './gradlew clean build'
          }
        }
      }
    }

    stage('Build image') {
      steps {
        script {
          dir('./backend-payment') {
            dockerImage = docker.build repository
          }
        }
      }
    }

    stage('Login'){
      steps{
        sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin' // docker hub 로그인
      }
    }

    stage('Push image') {
      steps {
        script {
          sh 'docker push $repository' //docker push
        }
      }
    }

    stage('Prune old images') {
      steps {
        script {
          sh "docker system prune -af --volumes"
        }
      }
    }

    stage('Clean image') {
      steps {
        script {
          try {
            sh 'docker rmi $repository' // jenkins 컨테이너에 있는 docker image 제거
          } catch (Exception e) {
            sh 'echo "fail to remove Docker Image"'
          }
        }
      }
    }

    stage('Deployment') {
      steps {
        script {
          try {
            sh 'docker stop giveus_backend_payment'
            sh 'docker rm giveus_backend_payment'
          } catch (e) {
            sh 'echo "fail to stop and remove container"'
          }
        }
        sh 'docker pull $repository:latest'
        sh 'docker run --name giveus_backend_payment -d -p 8084:8084 $repository \
            -e TZ=Asia/Seoul \
            -e MYSQL_USERNAME = ${MYSQL_USERNAME} \
            -e MYSQL_PASSWORD = ${MYSQL_PASSWORD} \
            -e REDIS_PASSWORD = ${REDIS_PASSWORD} \
            -e KAKAOPAY_CID = ${KAKAOPAY_CID} \
            -e KAKAOPAY_SECRET_KEY = ${KAKAOPAY_SECRET_KEY} \
            -e TOSSPAYMENTS_SECRET_KEY = ${TOSSPAYMENTS_SECRET_KEY}'
      }
    }

  }
}